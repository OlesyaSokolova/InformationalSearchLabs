1. Назовите команды, позволяющие просматривать содержимое таблиц и получать информацию об их структуре.
	1.1. Запрос данных в языке SQL осуществляется командой SELECT.
	Для выбора всей информации из таблицы используется наиболее простая форма команды:

      	SELECT * FROM <имя_объекта>;
	где <имя_объекта> вообще говоря, имеет вид <имя_базы_данных.имя_таблицы>

	1.2. Для получения только интересующих вас данных (а не всех имеющихся в таблице) необходимо в команде SELECT указывать дополнительную 	   		информацию. 			
		1.2.1. Чтобы запросить нужные столбцы, их необходимо перечислить после ключевого слова SELECT через запятую. Для указания конкретных 			столбцов в команде SELECT необходимо знать их точное название. 
		1.2.2. Для того, чтобы вывести данные из столбца БЕЗ повторяющихся значений, используется параметр DISTINCT.
		1.2.3. Выбор требуемых строк осуществляется применением фразы WHERE <условие> в команде SELECT.

	1.2. Команда DESCRIBE (или сокращенно DESC) позволяет получить имена столбцов и другую информацию о структуре таблиц. 

2. Перечислите известные вам реляционные, булевы и специальные операторы языка MySQL.
	2.1. Реляционные операторы, которыми располагает SQL:

            =      - равно

            >      - больше, чем

            <      - меньше, чем

            >=     - больше или равно

            <=     - меньше или равно

            <>, != - не равно

	2.2. Агрегатные (общие, многострочные, групповые) функции обрабатывают множества значений всего столбца таблицы или группы строк. Агрегатные 		функции возвращают одиночное значение. Наиболее употребимы следующие функции:

      	SUM   - арифметическая сумма всех значений столбца

      	AVG   - среднее значение всех значений столбца

      	MAX   - наибольшее значение из всех значений столбца

        MIN   - наименьшее значение из всех значений столбца
                                                        
 	Для групповых функций применяется следующий общий синтаксис: 
	<функция> ([ DISTINCT | ALL ] <выражение>)                                                      

      	Агрегатные функции используются подобно именам полей в команде SELECT, при этом они используют имена полей (столбцов) как аргументы. Функции 		SUM и AVG могут применяться только к числовым полям. С  MAX и  MIN могут использоваться как числовые, так и символьные поля.


3. Каким образом агрегатные функции применяются к группам строк?
	Агрегатные функции могут применяться к группам строк при использовании опции GROUP BY. При этом автоматически выполняется разбивка на группы 	значений в тех столбцах, которые указаны как аргументы в опции GROUP BY.

4. Для чего служит механизм определения псевдонимов таблиц?
	Объединение таблиц с собой может быть представлено как объединение двух копий одной и той же таблицы. Таблицы на самом деле не копируются, но SQL выполняет команды так, как если бы это было сделано.
      Когда таблица объединяется с собой, все имена столбцов дополняются префиксами имен экземпляров таблиц. Столбцы каждого экземпляра таблицы должны иметь свой префикс, так как каждый экземпляр таблицы должен иметь свое имя. Для образования этих имен используют механизм определения псевдонимов. Псевдонимы таблиц определяются во фразе FROM команды SELECT, и такие псевдонимы существуют только пока команда выполняется.
	Не всегда обязательно использовать каждый псевдоним или таблицу, которые упомянуты во фразе FROM, среди выводимых командой SELECT полей. Иногда псевдонимы определяются исключительно потому, что они требуются только во фразе WHERE, т.е. для определения условий выбора строк.

5. Назовите команды создания, изменения и удаления таблиц.
	5.0. CREATE, ALTER, DROP. Команды создания, изменения и удаления таблиц относятся к группе команд SQL, называемой языком определения данных - 		DDL (Data Definition Language). Команды создания, изменения и удаления таблиц (равно как и команды изменений данных в таблицах) не приводят к 		выводу данных на экран. 

	5.1. Таблицы создаются командой CREATE TABLE. В простейшем случае команда определяет имя таблицы, имена столбцов, а также типы и размеры данных 	для столбцов. Команда CREATE TABLE создает пустую таблицу. Для наполнения таблицы данными их можно загружать в таблицу при ее создании. Для 		этого в команде CREATE TABLE используют фразу AS SELECT..., которая позволяет копировать данные из другой, уже существующей таблицы. В этом 		случае структура создаваемой таблицы будет идентична (полностью или частично) структуре этой другой таблицы.

	5.2. Структура существующей таблицы может быть изменена командой ALTER TABLE. Добавление столбцов в конец таблицы или увеличение размера типа 		данных можно выполнять, даже если в таблице имеются данные.  ALTER TABLE tab1 ADD .. ALTER TABLE tab2 MODIFY ..

	5.3.  Для удаления таблицы из базы данных можно использовать команду DROP TABLE.

6. Перечислите команды изменения данных в таблицах.
	6.1. Для вставки в таблицу базы данных новых строк можно использовать команду INSERT. 
	Команда INSERT применяется в двух вариантах в зависимости от того, нужно ли вставить в таблицу одну строку или сразу несколько строк. Можно 		вставить данные из другой таблицы.
	
	6.2. Для удаления строк из таблиц можно использовать команды DELETE и TRUNCATE. При помощи команды DELETE можно удалить все строки из таблицы 		(если не использовать фразу WHERE) или только строки, удовлетворяющие условию во фразе WHERE. Команда TRUNCATE всегда удаляет все строки из 		таблицы.
	
	6.3. Для изменения полей существующих в таблице строк используют команду UPDATE. Эта команда обновляет поля для всех строк, удовлетворяющих 		условию во фразе WHERE. UPDATE .. SET

-------------------------------------------------------------------

1. Напишите запрос, который выводит все строки из таблицы Покупателей, для которых номер продавца равен 1001.
	SELECT * FROM `cust` WHERE snum = 1001

2. Напишите запрос, который выводит таблицу Продавцов со столбцами в следующем порядке: city, sname, snum, comm.
	SELECT city, sname, snum, comm FROM `sal`

3. Напишите запрос, который выводит оценку (rating), сопровождаемую именем каждого покупателя в городе San Jose.
	SELECT rating, cname FROM `cust` WHERE city = 'San Jose'

4. Напишите запрос, который выводит значение номера продавца всех продавцов из таблицы Заказов без каких бы то ни было повторений.
	ELECT DISTINCT snum FROM sal

5. Напишите запрос, который может выдать вам поля sname и city для всех продавцов в Лондоне с комиссионными строго больше 0.11
	SELECT sname, city FROM `sal` WHERE city = 'London' AND comm > 0.11

6. Напишите запрос к таблице Покупателей, который может вывести данные обо всех покупателях с рейтингом меньше или равным 200, если они не находятся в Риме
	SELECT * FROM `cust` WHERE city != 'Rome' AND rating <= 200

7. Запросите двумя способами все заказы на 3 и 5 октября 1990 г.
	a. SELECT * FROM `ord` WHERE odate = '03-OCT-90' OR odate = '05-OCT-90'
	b. SELECT * FROM `ord` WHERE NOT (odate != '03-OCT-90' AND odate != '05-OCT-90')
	c. SELECT * FROM `ord` WHERE odate IN ('03-OCT-90', '05-OCT-90')
	
8. Напишите запрос, который может вывести всех покупателей, чьи имена начинаются с буквы, попадающей в диапазон от A до G.
	SELECT * FROM cust WHERE cname BETWEEN 'A' AND 'H'

9. Напишите запрос, который выберет всех продавцов, имена которых содержат букву e.
	SELECT * FROM `sal` WHERE sname LIKE '%e%'

10. Напишите запрос, который сосчитал бы сумму всех заказов на 3 октября 1990 г.
	SELECT SUM(amt) FROM `ord` WHERE odate = '03-OCT-90


11. Напишите запрос, который сосчитал бы сумму всех заказов для продавца с номером 1001
	SELECT SUM(amt) FROM `ord` WHERE snum = 1001

12. Напишите запрос, который выбрал бы наибольший заказ для каждого продавца.
	SELECT snum, MAX(amt) FROM ord GROUP BY snum

13. Напишите запрос, который выбрал бы покупателя, чье имя является первым в алфавитном порядке среди имен, заканчивающихся на букву s.
	SELECT * FROM cust WHERE cname LIKE '%s' ORDER BY cname ASC LIMIT 1

14. Напишите запрос, который выбрал бы средние комиссионные в каждом городе.
	SELECT AVG(comm) FROM `sal` GROUP BY city

15. Напишите запрос, который вывел бы для каждого заказа на 3 октября его номер, стоимость заказа в евро (1$=0.8 евро), имя продавца и размер комиссионных, полученных продавцом за этот заказ.
	SELECT onum, amt * 0.8, sname, comm FROM ord, sal WHERE odate = '03-OCT-90' AND ord.snum = sal.snum

16. Напишите запрос, который выводит номера заказов в возрастающем порядке, а также имена продавцов и покупателей заказов, продавец которых находится в Лондоне или Риме.
	SELECT ord.onum, sal.sname, cust.cname 
	FROM ord, sal, cust
	WHERE ord.snum = sal.snum AND ord.cnum = cust.cnum AND (sal.city = 'London' OR sal.city = 'Rome') 
	ORDER BY ord.onum ASC

17. Запросите имена продавцов в алфавитном порядке, суммарные значения их заказов, совершенных до 5 октября, и полученные комиссионные.
	SELECT sal.sname, SUM(ord.amt), SUM(ord.amt*sal.comm) AS gotComm 
	FROM sal, ord 
	WHERE sal.snum = ord.snum AND ord.odate < '05-OCT-90' 
	GROUP BY sal.sname 
	ORDER BY sal.sname ASC

18. Выведите номера заказов, их стоимость и имена продавцов и покупателей, если продавцы и покупатели находятся в городах, чьи названия начинаются с букв из диапазона от L до R.
	SELECT onum, amt, sname, cname
	FROM ord, sal, cust
	    WHERE sal.city BETWEEN 'L' AND 'S' 
	    AND cust.city BETWEEN 'L' AND 'S'
	    AND ord.cnum = cust.cnum
	    AND ord.snum = cust.snum

19. Запросите все пары покупателей, обслуживаемые одним и тем же продавцом. Исключите комбинации покупателей с самими собой, а также пары в обратном порядке.
	SELECT cust1.cname, cust2.cname 
	FROM cust cust1, cust cust2 
	WHERE cust1.snum = cust2.snum 
	AND cust1.cname < cust2.cname

20. С помощью подзапроса выведите имена всех покупателей, чьи продавцы имеют комиссионные меньше 0.13.
	SELECT cname FROM cust WHERE snum IN
		(SELECT snum FROM sal WHERE comm < 0.13);

21. Напишите команду, создающую копию таблицы Продавцов с одновременным копированием данных из SAMPLE.SAL. Убедитесь в сходности структур таблиц при помощи команды DESC и идентичности данных в таблице-оригинале и таблице-копии.
	a. CREATE TABLE sal_copy 
		AS SELECT * FROM sal
	b. DESC sal;
	   DESC sal_copy
	
22. Напишите последовательность команд, которая вставляет две новые записи в вашу таблицу Продавцов, выводит таблицу после вставки, удаляет одну запись о новом продавце и вновь выводит таблицу.
	a. INSERT INTO sal (snum, sname, city, comm) VALUES 
							(1008, 'Deborah', 'New York', 0.10), 
							(1011, 'Derek', 'Berdsk', 0.10);
	b. SELECT * FROM sal;
	c. DELETE FROM sal WHERE snum = 1011;
	d. SELECT * FROM sal;
	
23. Напишите последовательность команд, которая вставляет две строки в вашу таблицу Продавцов, увеличивает в 2 раза комиссионные у всех продавцов и выводит содержимое таблицы после каждого изменения.
	a. INSERT INTO sal (snum, sname, city, comm) VALUES 
							(1022, 'Sarah', 'Paris', 0.10), 
							(1033, 'Peter', 'Moscow', 0.10);
	b. SELECT * FROM sal;
                            
	c. UPDATE sal
		SET comm = comm * 2;

	d. SELECT * FROM sal;
